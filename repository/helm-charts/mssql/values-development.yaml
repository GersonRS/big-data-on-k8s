acceptEula:
  value: "y"
edition:
  value: Developer
collation: SQL_Latin1_General_CP1_CI_AS
lcid: 1033
hadr: 0
agent:
  # enable sql server agent
  enabled: true
# Override sapassword in templates/secret.yaml
# user = sa
sapassword: "IlS27OpKxw9EYObU80dz"
existingSecret: ""
existingSecretKey: sapassword
image:
  repository: mcr.microsoft.com/mssql/server
  tag: 2017-latest
  pullPolicy: IfNotPresent
  ## It is possible to specify docker registry credentials
  ## See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  # pullSecrets:
  #    - name: regsecret

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName: "default-scheduler"

service:
  # If headless is set to TRUE then the service type is ignored
  headless: false
  type: ClusterIP
  port: 1433
  nodePort:
  annotations: {}
  labels: {}
  loadBalancerIP:
deployment:
  annotations: {}
  labels: {}
pod:
  annotations: {}
  labels: {}
persistence:
  enabled: true
  # existingDataClaim:
  # existingTransactionLogClaim:
  # existingBackupClaim:
  # existingMasterClaim:
  storageClass: ""
  dataAccessMode: ReadWriteOnce
  dataSize: 30Gi
  transactionLogAccessMode: ReadWriteOnce
  transactionLogSize: 10Gi
  backupAccessMode: ReadWriteOnce
  backupSize: 5Gi
  masterAccessMode: ReadWriteOnce
  masterSize: 5Gi
livenessprobe:
  initialDelaySeconds: 15
  periodSeconds: 20
readinessprobe:
  initialDelaySeconds: 5
  periodSeconds: 10
resources:
  requests:
    cpu: 250m
    memory: 512Mi
  limits:
    cpu: 250m
    memory: 2Gi
nodeSelector: {}
  # kubernetes.io/hostname: minikube

tolerations: []

affinity: {}

securityContext: {}
  # runAsUser: 1000
